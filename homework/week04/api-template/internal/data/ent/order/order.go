// Code generated by entc, DO NOT EDIT.

package order

import (
	"time"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldConfigType holds the string denoting the config_type field in the database.
	FieldConfigType = "config_type"
	// FieldRoomNo holds the string denoting the room_no field in the database.
	FieldRoomNo = "room_no"
	// FieldBuyer holds the string denoting the buyer field in the database.
	FieldBuyer = "buyer"
	// FieldFinalPrice holds the string denoting the final_price field in the database.
	FieldFinalPrice = "final_price"
	// FieldActualPrice holds the string denoting the actual_price field in the database.
	FieldActualPrice = "actual_price"
	// FieldDepositDate holds the string denoting the deposit_date field in the database.
	FieldDepositDate = "deposit_date"
	// FieldTransactionDate holds the string denoting the transaction_date field in the database.
	FieldTransactionDate = "transaction_date"
	// FieldFeeScale holds the string denoting the fee_scale field in the database.
	FieldFeeScale = "fee_scale"
	// FieldDischargeFee holds the string denoting the discharge_fee field in the database.
	FieldDischargeFee = "discharge_fee"
	// FieldForwardFee holds the string denoting the forward_fee field in the database.
	FieldForwardFee = "forward_fee"
	// FieldReceivableFee holds the string denoting the receivable_fee field in the database.
	FieldReceivableFee = "receivable_fee"
	// FieldInvoiced holds the string denoting the invoiced field in the database.
	FieldInvoiced = "invoiced"
	// FieldNotInvoiced holds the string denoting the not_invoiced field in the database.
	FieldNotInvoiced = "not_invoiced"
	// FieldReceived holds the string denoting the received field in the database.
	FieldReceived = "received"
	// FieldNotReceived holds the string denoting the not_received field in the database.
	FieldNotReceived = "not_received"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReserve holds the string denoting the reserve field in the database.
	FieldReserve = "reserve"
	// FieldReservePrice holds the string denoting the reserve_price field in the database.
	FieldReservePrice = "reserve_price"
	// FieldIsDelete holds the string denoting the is_delete field in the database.
	FieldIsDelete = "is_delete"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldPaper holds the string denoting the paper field in the database.
	FieldPaper = "paper"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_orders"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldClientID,
	FieldConfigType,
	FieldRoomNo,
	FieldBuyer,
	FieldFinalPrice,
	FieldActualPrice,
	FieldDepositDate,
	FieldTransactionDate,
	FieldFeeScale,
	FieldDischargeFee,
	FieldForwardFee,
	FieldReceivableFee,
	FieldInvoiced,
	FieldNotInvoiced,
	FieldReceived,
	FieldNotReceived,
	FieldStatus,
	FieldReserve,
	FieldReservePrice,
	FieldIsDelete,
	FieldRemark,
	FieldPaper,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "order_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDepositDate holds the default value on creation for the "deposit_date" field.
	DefaultDepositDate func() time.Time
	// DefaultTransactionDate holds the default value on creation for the "transaction_date" field.
	DefaultTransactionDate func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)
