// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-template/internal/data/ent/order"
	"api-template/internal/data/ent/predicate"
	"api-template/internal/data/ent/user"
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrder = "Order"
	TypeUser  = "User"
)

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	client_id         *string
	config_type       *string
	room_no           *string
	buyer             *string
	final_price       *float32
	addfinal_price    *float32
	actual_price      *float32
	addactual_price   *float32
	deposit_date      *time.Time
	transaction_date  *time.Time
	fee_scale         *float32
	addfee_scale      *float32
	discharge_fee     *float32
	adddischarge_fee  *float32
	forward_fee       *float32
	addforward_fee    *float32
	receivable_fee    *float32
	addreceivable_fee *float32
	invoiced          *float32
	addinvoiced       *float32
	not_invoiced      *float32
	addnot_invoiced   *float32
	received          *float32
	addreceived       *float32
	not_received      *float32
	addnot_received   *float32
	status            *string
	reserve           *string
	reserve_price     *float32
	addreserve_price  *float32
	is_delete         *string
	remark            *string
	paper             *string
	created_at        *time.Time
	created_by        *string
	updated_at        *time.Time
	updated_by        *string
	clearedFields     map[string]struct{}
	users             map[uuid.UUID]struct{}
	removedusers      map[uuid.UUID]struct{}
	clearedusers      bool
	done              bool
	oldValue          func(context.Context) (*Order, error)
	predicates        []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id int64) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Order entities.
func (m *OrderMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetClientID sets the "client_id" field.
func (m *OrderMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *OrderMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *OrderMutation) ResetClientID() {
	m.client_id = nil
}

// SetConfigType sets the "config_type" field.
func (m *OrderMutation) SetConfigType(s string) {
	m.config_type = &s
}

// ConfigType returns the value of the "config_type" field in the mutation.
func (m *OrderMutation) ConfigType() (r string, exists bool) {
	v := m.config_type
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigType returns the old "config_type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldConfigType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfigType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfigType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigType: %w", err)
	}
	return oldValue.ConfigType, nil
}

// ResetConfigType resets all changes to the "config_type" field.
func (m *OrderMutation) ResetConfigType() {
	m.config_type = nil
}

// SetRoomNo sets the "room_no" field.
func (m *OrderMutation) SetRoomNo(s string) {
	m.room_no = &s
}

// RoomNo returns the value of the "room_no" field in the mutation.
func (m *OrderMutation) RoomNo() (r string, exists bool) {
	v := m.room_no
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomNo returns the old "room_no" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldRoomNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomNo: %w", err)
	}
	return oldValue.RoomNo, nil
}

// ResetRoomNo resets all changes to the "room_no" field.
func (m *OrderMutation) ResetRoomNo() {
	m.room_no = nil
}

// SetBuyer sets the "buyer" field.
func (m *OrderMutation) SetBuyer(s string) {
	m.buyer = &s
}

// Buyer returns the value of the "buyer" field in the mutation.
func (m *OrderMutation) Buyer() (r string, exists bool) {
	v := m.buyer
	if v == nil {
		return
	}
	return *v, true
}

// OldBuyer returns the old "buyer" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldBuyer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBuyer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBuyer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuyer: %w", err)
	}
	return oldValue.Buyer, nil
}

// ResetBuyer resets all changes to the "buyer" field.
func (m *OrderMutation) ResetBuyer() {
	m.buyer = nil
}

// SetFinalPrice sets the "final_price" field.
func (m *OrderMutation) SetFinalPrice(f float32) {
	m.final_price = &f
	m.addfinal_price = nil
}

// FinalPrice returns the value of the "final_price" field in the mutation.
func (m *OrderMutation) FinalPrice() (r float32, exists bool) {
	v := m.final_price
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalPrice returns the old "final_price" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldFinalPrice(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFinalPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFinalPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalPrice: %w", err)
	}
	return oldValue.FinalPrice, nil
}

// AddFinalPrice adds f to the "final_price" field.
func (m *OrderMutation) AddFinalPrice(f float32) {
	if m.addfinal_price != nil {
		*m.addfinal_price += f
	} else {
		m.addfinal_price = &f
	}
}

// AddedFinalPrice returns the value that was added to the "final_price" field in this mutation.
func (m *OrderMutation) AddedFinalPrice() (r float32, exists bool) {
	v := m.addfinal_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetFinalPrice resets all changes to the "final_price" field.
func (m *OrderMutation) ResetFinalPrice() {
	m.final_price = nil
	m.addfinal_price = nil
}

// SetActualPrice sets the "actual_price" field.
func (m *OrderMutation) SetActualPrice(f float32) {
	m.actual_price = &f
	m.addactual_price = nil
}

// ActualPrice returns the value of the "actual_price" field in the mutation.
func (m *OrderMutation) ActualPrice() (r float32, exists bool) {
	v := m.actual_price
	if v == nil {
		return
	}
	return *v, true
}

// OldActualPrice returns the old "actual_price" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldActualPrice(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActualPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActualPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActualPrice: %w", err)
	}
	return oldValue.ActualPrice, nil
}

// AddActualPrice adds f to the "actual_price" field.
func (m *OrderMutation) AddActualPrice(f float32) {
	if m.addactual_price != nil {
		*m.addactual_price += f
	} else {
		m.addactual_price = &f
	}
}

// AddedActualPrice returns the value that was added to the "actual_price" field in this mutation.
func (m *OrderMutation) AddedActualPrice() (r float32, exists bool) {
	v := m.addactual_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetActualPrice resets all changes to the "actual_price" field.
func (m *OrderMutation) ResetActualPrice() {
	m.actual_price = nil
	m.addactual_price = nil
}

// SetDepositDate sets the "deposit_date" field.
func (m *OrderMutation) SetDepositDate(t time.Time) {
	m.deposit_date = &t
}

// DepositDate returns the value of the "deposit_date" field in the mutation.
func (m *OrderMutation) DepositDate() (r time.Time, exists bool) {
	v := m.deposit_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDepositDate returns the old "deposit_date" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDepositDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepositDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepositDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepositDate: %w", err)
	}
	return oldValue.DepositDate, nil
}

// ResetDepositDate resets all changes to the "deposit_date" field.
func (m *OrderMutation) ResetDepositDate() {
	m.deposit_date = nil
}

// SetTransactionDate sets the "transaction_date" field.
func (m *OrderMutation) SetTransactionDate(t time.Time) {
	m.transaction_date = &t
}

// TransactionDate returns the value of the "transaction_date" field in the mutation.
func (m *OrderMutation) TransactionDate() (r time.Time, exists bool) {
	v := m.transaction_date
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionDate returns the old "transaction_date" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTransactionDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTransactionDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTransactionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionDate: %w", err)
	}
	return oldValue.TransactionDate, nil
}

// ResetTransactionDate resets all changes to the "transaction_date" field.
func (m *OrderMutation) ResetTransactionDate() {
	m.transaction_date = nil
}

// SetFeeScale sets the "fee_scale" field.
func (m *OrderMutation) SetFeeScale(f float32) {
	m.fee_scale = &f
	m.addfee_scale = nil
}

// FeeScale returns the value of the "fee_scale" field in the mutation.
func (m *OrderMutation) FeeScale() (r float32, exists bool) {
	v := m.fee_scale
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeScale returns the old "fee_scale" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldFeeScale(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeScale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeScale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeScale: %w", err)
	}
	return oldValue.FeeScale, nil
}

// AddFeeScale adds f to the "fee_scale" field.
func (m *OrderMutation) AddFeeScale(f float32) {
	if m.addfee_scale != nil {
		*m.addfee_scale += f
	} else {
		m.addfee_scale = &f
	}
}

// AddedFeeScale returns the value that was added to the "fee_scale" field in this mutation.
func (m *OrderMutation) AddedFeeScale() (r float32, exists bool) {
	v := m.addfee_scale
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeeScale resets all changes to the "fee_scale" field.
func (m *OrderMutation) ResetFeeScale() {
	m.fee_scale = nil
	m.addfee_scale = nil
}

// SetDischargeFee sets the "discharge_fee" field.
func (m *OrderMutation) SetDischargeFee(f float32) {
	m.discharge_fee = &f
	m.adddischarge_fee = nil
}

// DischargeFee returns the value of the "discharge_fee" field in the mutation.
func (m *OrderMutation) DischargeFee() (r float32, exists bool) {
	v := m.discharge_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldDischargeFee returns the old "discharge_fee" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDischargeFee(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDischargeFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDischargeFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDischargeFee: %w", err)
	}
	return oldValue.DischargeFee, nil
}

// AddDischargeFee adds f to the "discharge_fee" field.
func (m *OrderMutation) AddDischargeFee(f float32) {
	if m.adddischarge_fee != nil {
		*m.adddischarge_fee += f
	} else {
		m.adddischarge_fee = &f
	}
}

// AddedDischargeFee returns the value that was added to the "discharge_fee" field in this mutation.
func (m *OrderMutation) AddedDischargeFee() (r float32, exists bool) {
	v := m.adddischarge_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetDischargeFee resets all changes to the "discharge_fee" field.
func (m *OrderMutation) ResetDischargeFee() {
	m.discharge_fee = nil
	m.adddischarge_fee = nil
}

// SetForwardFee sets the "forward_fee" field.
func (m *OrderMutation) SetForwardFee(f float32) {
	m.forward_fee = &f
	m.addforward_fee = nil
}

// ForwardFee returns the value of the "forward_fee" field in the mutation.
func (m *OrderMutation) ForwardFee() (r float32, exists bool) {
	v := m.forward_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldForwardFee returns the old "forward_fee" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldForwardFee(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldForwardFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldForwardFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForwardFee: %w", err)
	}
	return oldValue.ForwardFee, nil
}

// AddForwardFee adds f to the "forward_fee" field.
func (m *OrderMutation) AddForwardFee(f float32) {
	if m.addforward_fee != nil {
		*m.addforward_fee += f
	} else {
		m.addforward_fee = &f
	}
}

// AddedForwardFee returns the value that was added to the "forward_fee" field in this mutation.
func (m *OrderMutation) AddedForwardFee() (r float32, exists bool) {
	v := m.addforward_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetForwardFee resets all changes to the "forward_fee" field.
func (m *OrderMutation) ResetForwardFee() {
	m.forward_fee = nil
	m.addforward_fee = nil
}

// SetReceivableFee sets the "receivable_fee" field.
func (m *OrderMutation) SetReceivableFee(f float32) {
	m.receivable_fee = &f
	m.addreceivable_fee = nil
}

// ReceivableFee returns the value of the "receivable_fee" field in the mutation.
func (m *OrderMutation) ReceivableFee() (r float32, exists bool) {
	v := m.receivable_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldReceivableFee returns the old "receivable_fee" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldReceivableFee(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReceivableFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReceivableFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceivableFee: %w", err)
	}
	return oldValue.ReceivableFee, nil
}

// AddReceivableFee adds f to the "receivable_fee" field.
func (m *OrderMutation) AddReceivableFee(f float32) {
	if m.addreceivable_fee != nil {
		*m.addreceivable_fee += f
	} else {
		m.addreceivable_fee = &f
	}
}

// AddedReceivableFee returns the value that was added to the "receivable_fee" field in this mutation.
func (m *OrderMutation) AddedReceivableFee() (r float32, exists bool) {
	v := m.addreceivable_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetReceivableFee resets all changes to the "receivable_fee" field.
func (m *OrderMutation) ResetReceivableFee() {
	m.receivable_fee = nil
	m.addreceivable_fee = nil
}

// SetInvoiced sets the "invoiced" field.
func (m *OrderMutation) SetInvoiced(f float32) {
	m.invoiced = &f
	m.addinvoiced = nil
}

// Invoiced returns the value of the "invoiced" field in the mutation.
func (m *OrderMutation) Invoiced() (r float32, exists bool) {
	v := m.invoiced
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiced returns the old "invoiced" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldInvoiced(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvoiced is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvoiced requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiced: %w", err)
	}
	return oldValue.Invoiced, nil
}

// AddInvoiced adds f to the "invoiced" field.
func (m *OrderMutation) AddInvoiced(f float32) {
	if m.addinvoiced != nil {
		*m.addinvoiced += f
	} else {
		m.addinvoiced = &f
	}
}

// AddedInvoiced returns the value that was added to the "invoiced" field in this mutation.
func (m *OrderMutation) AddedInvoiced() (r float32, exists bool) {
	v := m.addinvoiced
	if v == nil {
		return
	}
	return *v, true
}

// ResetInvoiced resets all changes to the "invoiced" field.
func (m *OrderMutation) ResetInvoiced() {
	m.invoiced = nil
	m.addinvoiced = nil
}

// SetNotInvoiced sets the "not_invoiced" field.
func (m *OrderMutation) SetNotInvoiced(f float32) {
	m.not_invoiced = &f
	m.addnot_invoiced = nil
}

// NotInvoiced returns the value of the "not_invoiced" field in the mutation.
func (m *OrderMutation) NotInvoiced() (r float32, exists bool) {
	v := m.not_invoiced
	if v == nil {
		return
	}
	return *v, true
}

// OldNotInvoiced returns the old "not_invoiced" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldNotInvoiced(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNotInvoiced is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNotInvoiced requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotInvoiced: %w", err)
	}
	return oldValue.NotInvoiced, nil
}

// AddNotInvoiced adds f to the "not_invoiced" field.
func (m *OrderMutation) AddNotInvoiced(f float32) {
	if m.addnot_invoiced != nil {
		*m.addnot_invoiced += f
	} else {
		m.addnot_invoiced = &f
	}
}

// AddedNotInvoiced returns the value that was added to the "not_invoiced" field in this mutation.
func (m *OrderMutation) AddedNotInvoiced() (r float32, exists bool) {
	v := m.addnot_invoiced
	if v == nil {
		return
	}
	return *v, true
}

// ResetNotInvoiced resets all changes to the "not_invoiced" field.
func (m *OrderMutation) ResetNotInvoiced() {
	m.not_invoiced = nil
	m.addnot_invoiced = nil
}

// SetReceived sets the "received" field.
func (m *OrderMutation) SetReceived(f float32) {
	m.received = &f
	m.addreceived = nil
}

// Received returns the value of the "received" field in the mutation.
func (m *OrderMutation) Received() (r float32, exists bool) {
	v := m.received
	if v == nil {
		return
	}
	return *v, true
}

// OldReceived returns the old "received" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldReceived(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReceived is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReceived requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceived: %w", err)
	}
	return oldValue.Received, nil
}

// AddReceived adds f to the "received" field.
func (m *OrderMutation) AddReceived(f float32) {
	if m.addreceived != nil {
		*m.addreceived += f
	} else {
		m.addreceived = &f
	}
}

// AddedReceived returns the value that was added to the "received" field in this mutation.
func (m *OrderMutation) AddedReceived() (r float32, exists bool) {
	v := m.addreceived
	if v == nil {
		return
	}
	return *v, true
}

// ResetReceived resets all changes to the "received" field.
func (m *OrderMutation) ResetReceived() {
	m.received = nil
	m.addreceived = nil
}

// SetNotReceived sets the "not_received" field.
func (m *OrderMutation) SetNotReceived(f float32) {
	m.not_received = &f
	m.addnot_received = nil
}

// NotReceived returns the value of the "not_received" field in the mutation.
func (m *OrderMutation) NotReceived() (r float32, exists bool) {
	v := m.not_received
	if v == nil {
		return
	}
	return *v, true
}

// OldNotReceived returns the old "not_received" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldNotReceived(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNotReceived is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNotReceived requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotReceived: %w", err)
	}
	return oldValue.NotReceived, nil
}

// AddNotReceived adds f to the "not_received" field.
func (m *OrderMutation) AddNotReceived(f float32) {
	if m.addnot_received != nil {
		*m.addnot_received += f
	} else {
		m.addnot_received = &f
	}
}

// AddedNotReceived returns the value that was added to the "not_received" field in this mutation.
func (m *OrderMutation) AddedNotReceived() (r float32, exists bool) {
	v := m.addnot_received
	if v == nil {
		return
	}
	return *v, true
}

// ResetNotReceived resets all changes to the "not_received" field.
func (m *OrderMutation) ResetNotReceived() {
	m.not_received = nil
	m.addnot_received = nil
}

// SetStatus sets the "status" field.
func (m *OrderMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderMutation) ResetStatus() {
	m.status = nil
}

// SetReserve sets the "reserve" field.
func (m *OrderMutation) SetReserve(s string) {
	m.reserve = &s
}

// Reserve returns the value of the "reserve" field in the mutation.
func (m *OrderMutation) Reserve() (r string, exists bool) {
	v := m.reserve
	if v == nil {
		return
	}
	return *v, true
}

// OldReserve returns the old "reserve" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldReserve(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReserve is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReserve requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReserve: %w", err)
	}
	return oldValue.Reserve, nil
}

// ResetReserve resets all changes to the "reserve" field.
func (m *OrderMutation) ResetReserve() {
	m.reserve = nil
}

// SetReservePrice sets the "reserve_price" field.
func (m *OrderMutation) SetReservePrice(f float32) {
	m.reserve_price = &f
	m.addreserve_price = nil
}

// ReservePrice returns the value of the "reserve_price" field in the mutation.
func (m *OrderMutation) ReservePrice() (r float32, exists bool) {
	v := m.reserve_price
	if v == nil {
		return
	}
	return *v, true
}

// OldReservePrice returns the old "reserve_price" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldReservePrice(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReservePrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReservePrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReservePrice: %w", err)
	}
	return oldValue.ReservePrice, nil
}

// AddReservePrice adds f to the "reserve_price" field.
func (m *OrderMutation) AddReservePrice(f float32) {
	if m.addreserve_price != nil {
		*m.addreserve_price += f
	} else {
		m.addreserve_price = &f
	}
}

// AddedReservePrice returns the value that was added to the "reserve_price" field in this mutation.
func (m *OrderMutation) AddedReservePrice() (r float32, exists bool) {
	v := m.addreserve_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetReservePrice resets all changes to the "reserve_price" field.
func (m *OrderMutation) ResetReservePrice() {
	m.reserve_price = nil
	m.addreserve_price = nil
}

// SetIsDelete sets the "is_delete" field.
func (m *OrderMutation) SetIsDelete(s string) {
	m.is_delete = &s
}

// IsDelete returns the value of the "is_delete" field in the mutation.
func (m *OrderMutation) IsDelete() (r string, exists bool) {
	v := m.is_delete
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDelete returns the old "is_delete" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldIsDelete(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDelete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDelete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDelete: %w", err)
	}
	return oldValue.IsDelete, nil
}

// ResetIsDelete resets all changes to the "is_delete" field.
func (m *OrderMutation) ResetIsDelete() {
	m.is_delete = nil
}

// SetRemark sets the "remark" field.
func (m *OrderMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *OrderMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *OrderMutation) ResetRemark() {
	m.remark = nil
}

// SetPaper sets the "paper" field.
func (m *OrderMutation) SetPaper(s string) {
	m.paper = &s
}

// Paper returns the value of the "paper" field in the mutation.
func (m *OrderMutation) Paper() (r string, exists bool) {
	v := m.paper
	if v == nil {
		return
	}
	return *v, true
}

// OldPaper returns the old "paper" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaper(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaper is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaper requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaper: %w", err)
	}
	return oldValue.Paper, nil
}

// ResetPaper resets all changes to the "paper" field.
func (m *OrderMutation) ResetPaper() {
	m.paper = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *OrderMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *OrderMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *OrderMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *OrderMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *OrderMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *OrderMutation) ResetUpdatedBy() {
	m.updated_by = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *OrderMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *OrderMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *OrderMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *OrderMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *OrderMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *OrderMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *OrderMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 26)
	if m.client_id != nil {
		fields = append(fields, order.FieldClientID)
	}
	if m.config_type != nil {
		fields = append(fields, order.FieldConfigType)
	}
	if m.room_no != nil {
		fields = append(fields, order.FieldRoomNo)
	}
	if m.buyer != nil {
		fields = append(fields, order.FieldBuyer)
	}
	if m.final_price != nil {
		fields = append(fields, order.FieldFinalPrice)
	}
	if m.actual_price != nil {
		fields = append(fields, order.FieldActualPrice)
	}
	if m.deposit_date != nil {
		fields = append(fields, order.FieldDepositDate)
	}
	if m.transaction_date != nil {
		fields = append(fields, order.FieldTransactionDate)
	}
	if m.fee_scale != nil {
		fields = append(fields, order.FieldFeeScale)
	}
	if m.discharge_fee != nil {
		fields = append(fields, order.FieldDischargeFee)
	}
	if m.forward_fee != nil {
		fields = append(fields, order.FieldForwardFee)
	}
	if m.receivable_fee != nil {
		fields = append(fields, order.FieldReceivableFee)
	}
	if m.invoiced != nil {
		fields = append(fields, order.FieldInvoiced)
	}
	if m.not_invoiced != nil {
		fields = append(fields, order.FieldNotInvoiced)
	}
	if m.received != nil {
		fields = append(fields, order.FieldReceived)
	}
	if m.not_received != nil {
		fields = append(fields, order.FieldNotReceived)
	}
	if m.status != nil {
		fields = append(fields, order.FieldStatus)
	}
	if m.reserve != nil {
		fields = append(fields, order.FieldReserve)
	}
	if m.reserve_price != nil {
		fields = append(fields, order.FieldReservePrice)
	}
	if m.is_delete != nil {
		fields = append(fields, order.FieldIsDelete)
	}
	if m.remark != nil {
		fields = append(fields, order.FieldRemark)
	}
	if m.paper != nil {
		fields = append(fields, order.FieldPaper)
	}
	if m.created_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, order.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, order.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldClientID:
		return m.ClientID()
	case order.FieldConfigType:
		return m.ConfigType()
	case order.FieldRoomNo:
		return m.RoomNo()
	case order.FieldBuyer:
		return m.Buyer()
	case order.FieldFinalPrice:
		return m.FinalPrice()
	case order.FieldActualPrice:
		return m.ActualPrice()
	case order.FieldDepositDate:
		return m.DepositDate()
	case order.FieldTransactionDate:
		return m.TransactionDate()
	case order.FieldFeeScale:
		return m.FeeScale()
	case order.FieldDischargeFee:
		return m.DischargeFee()
	case order.FieldForwardFee:
		return m.ForwardFee()
	case order.FieldReceivableFee:
		return m.ReceivableFee()
	case order.FieldInvoiced:
		return m.Invoiced()
	case order.FieldNotInvoiced:
		return m.NotInvoiced()
	case order.FieldReceived:
		return m.Received()
	case order.FieldNotReceived:
		return m.NotReceived()
	case order.FieldStatus:
		return m.Status()
	case order.FieldReserve:
		return m.Reserve()
	case order.FieldReservePrice:
		return m.ReservePrice()
	case order.FieldIsDelete:
		return m.IsDelete()
	case order.FieldRemark:
		return m.Remark()
	case order.FieldPaper:
		return m.Paper()
	case order.FieldCreatedAt:
		return m.CreatedAt()
	case order.FieldCreatedBy:
		return m.CreatedBy()
	case order.FieldUpdatedAt:
		return m.UpdatedAt()
	case order.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldClientID:
		return m.OldClientID(ctx)
	case order.FieldConfigType:
		return m.OldConfigType(ctx)
	case order.FieldRoomNo:
		return m.OldRoomNo(ctx)
	case order.FieldBuyer:
		return m.OldBuyer(ctx)
	case order.FieldFinalPrice:
		return m.OldFinalPrice(ctx)
	case order.FieldActualPrice:
		return m.OldActualPrice(ctx)
	case order.FieldDepositDate:
		return m.OldDepositDate(ctx)
	case order.FieldTransactionDate:
		return m.OldTransactionDate(ctx)
	case order.FieldFeeScale:
		return m.OldFeeScale(ctx)
	case order.FieldDischargeFee:
		return m.OldDischargeFee(ctx)
	case order.FieldForwardFee:
		return m.OldForwardFee(ctx)
	case order.FieldReceivableFee:
		return m.OldReceivableFee(ctx)
	case order.FieldInvoiced:
		return m.OldInvoiced(ctx)
	case order.FieldNotInvoiced:
		return m.OldNotInvoiced(ctx)
	case order.FieldReceived:
		return m.OldReceived(ctx)
	case order.FieldNotReceived:
		return m.OldNotReceived(ctx)
	case order.FieldStatus:
		return m.OldStatus(ctx)
	case order.FieldReserve:
		return m.OldReserve(ctx)
	case order.FieldReservePrice:
		return m.OldReservePrice(ctx)
	case order.FieldIsDelete:
		return m.OldIsDelete(ctx)
	case order.FieldRemark:
		return m.OldRemark(ctx)
	case order.FieldPaper:
		return m.OldPaper(ctx)
	case order.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case order.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case order.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case order.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case order.FieldConfigType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigType(v)
		return nil
	case order.FieldRoomNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomNo(v)
		return nil
	case order.FieldBuyer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuyer(v)
		return nil
	case order.FieldFinalPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalPrice(v)
		return nil
	case order.FieldActualPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActualPrice(v)
		return nil
	case order.FieldDepositDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepositDate(v)
		return nil
	case order.FieldTransactionDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionDate(v)
		return nil
	case order.FieldFeeScale:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeScale(v)
		return nil
	case order.FieldDischargeFee:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDischargeFee(v)
		return nil
	case order.FieldForwardFee:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForwardFee(v)
		return nil
	case order.FieldReceivableFee:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceivableFee(v)
		return nil
	case order.FieldInvoiced:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiced(v)
		return nil
	case order.FieldNotInvoiced:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotInvoiced(v)
		return nil
	case order.FieldReceived:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceived(v)
		return nil
	case order.FieldNotReceived:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotReceived(v)
		return nil
	case order.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case order.FieldReserve:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReserve(v)
		return nil
	case order.FieldReservePrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReservePrice(v)
		return nil
	case order.FieldIsDelete:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDelete(v)
		return nil
	case order.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case order.FieldPaper:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaper(v)
		return nil
	case order.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case order.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case order.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addfinal_price != nil {
		fields = append(fields, order.FieldFinalPrice)
	}
	if m.addactual_price != nil {
		fields = append(fields, order.FieldActualPrice)
	}
	if m.addfee_scale != nil {
		fields = append(fields, order.FieldFeeScale)
	}
	if m.adddischarge_fee != nil {
		fields = append(fields, order.FieldDischargeFee)
	}
	if m.addforward_fee != nil {
		fields = append(fields, order.FieldForwardFee)
	}
	if m.addreceivable_fee != nil {
		fields = append(fields, order.FieldReceivableFee)
	}
	if m.addinvoiced != nil {
		fields = append(fields, order.FieldInvoiced)
	}
	if m.addnot_invoiced != nil {
		fields = append(fields, order.FieldNotInvoiced)
	}
	if m.addreceived != nil {
		fields = append(fields, order.FieldReceived)
	}
	if m.addnot_received != nil {
		fields = append(fields, order.FieldNotReceived)
	}
	if m.addreserve_price != nil {
		fields = append(fields, order.FieldReservePrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldFinalPrice:
		return m.AddedFinalPrice()
	case order.FieldActualPrice:
		return m.AddedActualPrice()
	case order.FieldFeeScale:
		return m.AddedFeeScale()
	case order.FieldDischargeFee:
		return m.AddedDischargeFee()
	case order.FieldForwardFee:
		return m.AddedForwardFee()
	case order.FieldReceivableFee:
		return m.AddedReceivableFee()
	case order.FieldInvoiced:
		return m.AddedInvoiced()
	case order.FieldNotInvoiced:
		return m.AddedNotInvoiced()
	case order.FieldReceived:
		return m.AddedReceived()
	case order.FieldNotReceived:
		return m.AddedNotReceived()
	case order.FieldReservePrice:
		return m.AddedReservePrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldFinalPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinalPrice(v)
		return nil
	case order.FieldActualPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActualPrice(v)
		return nil
	case order.FieldFeeScale:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeeScale(v)
		return nil
	case order.FieldDischargeFee:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDischargeFee(v)
		return nil
	case order.FieldForwardFee:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddForwardFee(v)
		return nil
	case order.FieldReceivableFee:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReceivableFee(v)
		return nil
	case order.FieldInvoiced:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInvoiced(v)
		return nil
	case order.FieldNotInvoiced:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNotInvoiced(v)
		return nil
	case order.FieldReceived:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReceived(v)
		return nil
	case order.FieldNotReceived:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNotReceived(v)
		return nil
	case order.FieldReservePrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReservePrice(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldClientID:
		m.ResetClientID()
		return nil
	case order.FieldConfigType:
		m.ResetConfigType()
		return nil
	case order.FieldRoomNo:
		m.ResetRoomNo()
		return nil
	case order.FieldBuyer:
		m.ResetBuyer()
		return nil
	case order.FieldFinalPrice:
		m.ResetFinalPrice()
		return nil
	case order.FieldActualPrice:
		m.ResetActualPrice()
		return nil
	case order.FieldDepositDate:
		m.ResetDepositDate()
		return nil
	case order.FieldTransactionDate:
		m.ResetTransactionDate()
		return nil
	case order.FieldFeeScale:
		m.ResetFeeScale()
		return nil
	case order.FieldDischargeFee:
		m.ResetDischargeFee()
		return nil
	case order.FieldForwardFee:
		m.ResetForwardFee()
		return nil
	case order.FieldReceivableFee:
		m.ResetReceivableFee()
		return nil
	case order.FieldInvoiced:
		m.ResetInvoiced()
		return nil
	case order.FieldNotInvoiced:
		m.ResetNotInvoiced()
		return nil
	case order.FieldReceived:
		m.ResetReceived()
		return nil
	case order.FieldNotReceived:
		m.ResetNotReceived()
		return nil
	case order.FieldStatus:
		m.ResetStatus()
		return nil
	case order.FieldReserve:
		m.ResetReserve()
		return nil
	case order.FieldReservePrice:
		m.ResetReservePrice()
		return nil
	case order.FieldIsDelete:
		m.ResetIsDelete()
		return nil
	case order.FieldRemark:
		m.ResetRemark()
		return nil
	case order.FieldPaper:
		m.ResetPaper()
		return nil
	case order.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case order.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case order.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case order.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, order.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, order.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, order.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	switch name {
	case order.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	switch name {
	case order.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Order edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	business_name *string
	address       *string
	phone         *string
	role_type     *string
	remark        *string
	is_valid      *string
	is_delete     *string
	created_at    *time.Time
	created_by    *string
	updated_at    *time.Time
	updated_by    *string
	clearedFields map[string]struct{}
	orders        map[int64]struct{}
	removedorders map[int64]struct{}
	clearedorders bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBusinessName sets the "business_name" field.
func (m *UserMutation) SetBusinessName(s string) {
	m.business_name = &s
}

// BusinessName returns the value of the "business_name" field in the mutation.
func (m *UserMutation) BusinessName() (r string, exists bool) {
	v := m.business_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessName returns the old "business_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBusinessName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBusinessName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBusinessName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessName: %w", err)
	}
	return oldValue.BusinessName, nil
}

// ResetBusinessName resets all changes to the "business_name" field.
func (m *UserMutation) ResetBusinessName() {
	m.business_name = nil
}

// SetAddress sets the "address" field.
func (m *UserMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *UserMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *UserMutation) ResetAddress() {
	m.address = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetRoleType sets the "role_type" field.
func (m *UserMutation) SetRoleType(s string) {
	m.role_type = &s
}

// RoleType returns the value of the "role_type" field in the mutation.
func (m *UserMutation) RoleType() (r string, exists bool) {
	v := m.role_type
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleType returns the old "role_type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRoleType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoleType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoleType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleType: %w", err)
	}
	return oldValue.RoleType, nil
}

// ResetRoleType resets all changes to the "role_type" field.
func (m *UserMutation) ResetRoleType() {
	m.role_type = nil
}

// SetRemark sets the "remark" field.
func (m *UserMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *UserMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *UserMutation) ResetRemark() {
	m.remark = nil
}

// SetIsValid sets the "is_valid" field.
func (m *UserMutation) SetIsValid(s string) {
	m.is_valid = &s
}

// IsValid returns the value of the "is_valid" field in the mutation.
func (m *UserMutation) IsValid() (r string, exists bool) {
	v := m.is_valid
	if v == nil {
		return
	}
	return *v, true
}

// OldIsValid returns the old "is_valid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsValid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsValid: %w", err)
	}
	return oldValue.IsValid, nil
}

// ResetIsValid resets all changes to the "is_valid" field.
func (m *UserMutation) ResetIsValid() {
	m.is_valid = nil
}

// SetIsDelete sets the "is_delete" field.
func (m *UserMutation) SetIsDelete(s string) {
	m.is_delete = &s
}

// IsDelete returns the value of the "is_delete" field in the mutation.
func (m *UserMutation) IsDelete() (r string, exists bool) {
	v := m.is_delete
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDelete returns the old "is_delete" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsDelete(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDelete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDelete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDelete: %w", err)
	}
	return oldValue.IsDelete, nil
}

// ResetIsDelete resets all changes to the "is_delete" field.
func (m *UserMutation) ResetIsDelete() {
	m.is_delete = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *UserMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserMutation) ResetUpdatedBy() {
	m.updated_by = nil
}

// AddOrderIDs adds the "orders" edge to the Order entity by ids.
func (m *UserMutation) AddOrderIDs(ids ...int64) {
	if m.orders == nil {
		m.orders = make(map[int64]struct{})
	}
	for i := range ids {
		m.orders[ids[i]] = struct{}{}
	}
}

// ClearOrders clears the "orders" edge to the Order entity.
func (m *UserMutation) ClearOrders() {
	m.clearedorders = true
}

// OrdersCleared reports if the "orders" edge to the Order entity was cleared.
func (m *UserMutation) OrdersCleared() bool {
	return m.clearedorders
}

// RemoveOrderIDs removes the "orders" edge to the Order entity by IDs.
func (m *UserMutation) RemoveOrderIDs(ids ...int64) {
	if m.removedorders == nil {
		m.removedorders = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.orders, ids[i])
		m.removedorders[ids[i]] = struct{}{}
	}
}

// RemovedOrders returns the removed IDs of the "orders" edge to the Order entity.
func (m *UserMutation) RemovedOrdersIDs() (ids []int64) {
	for id := range m.removedorders {
		ids = append(ids, id)
	}
	return
}

// OrdersIDs returns the "orders" edge IDs in the mutation.
func (m *UserMutation) OrdersIDs() (ids []int64) {
	for id := range m.orders {
		ids = append(ids, id)
	}
	return
}

// ResetOrders resets all changes to the "orders" edge.
func (m *UserMutation) ResetOrders() {
	m.orders = nil
	m.clearedorders = false
	m.removedorders = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.business_name != nil {
		fields = append(fields, user.FieldBusinessName)
	}
	if m.address != nil {
		fields = append(fields, user.FieldAddress)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.role_type != nil {
		fields = append(fields, user.FieldRoleType)
	}
	if m.remark != nil {
		fields = append(fields, user.FieldRemark)
	}
	if m.is_valid != nil {
		fields = append(fields, user.FieldIsValid)
	}
	if m.is_delete != nil {
		fields = append(fields, user.FieldIsDelete)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, user.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldBusinessName:
		return m.BusinessName()
	case user.FieldAddress:
		return m.Address()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldRoleType:
		return m.RoleType()
	case user.FieldRemark:
		return m.Remark()
	case user.FieldIsValid:
		return m.IsValid()
	case user.FieldIsDelete:
		return m.IsDelete()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldCreatedBy:
		return m.CreatedBy()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldBusinessName:
		return m.OldBusinessName(ctx)
	case user.FieldAddress:
		return m.OldAddress(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldRoleType:
		return m.OldRoleType(ctx)
	case user.FieldRemark:
		return m.OldRemark(ctx)
	case user.FieldIsValid:
		return m.OldIsValid(ctx)
	case user.FieldIsDelete:
		return m.OldIsDelete(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldBusinessName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessName(v)
		return nil
	case user.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldRoleType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleType(v)
		return nil
	case user.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case user.FieldIsValid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsValid(v)
		return nil
	case user.FieldIsDelete:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDelete(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldBusinessName:
		m.ResetBusinessName()
		return nil
	case user.FieldAddress:
		m.ResetAddress()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldRoleType:
		m.ResetRoleType()
		return nil
	case user.FieldRemark:
		m.ResetRemark()
		return nil
	case user.FieldIsValid:
		m.ResetIsValid()
		return nil
	case user.FieldIsDelete:
		m.ResetIsDelete()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.orders != nil {
		edges = append(edges, user.EdgeOrders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOrders:
		ids := make([]ent.Value, 0, len(m.orders))
		for id := range m.orders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorders != nil {
		edges = append(edges, user.EdgeOrders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOrders:
		ids := make([]ent.Value, 0, len(m.removedorders))
		for id := range m.removedorders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorders {
		edges = append(edges, user.EdgeOrders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeOrders:
		return m.clearedorders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOrders:
		m.ResetOrders()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
