// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-template/internal/data/ent/order"
	"api-template/internal/data/ent/predicate"
	"api-template/internal/data/ent/user"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetClientID sets the "client_id" field.
func (ou *OrderUpdate) SetClientID(s string) *OrderUpdate {
	ou.mutation.SetClientID(s)
	return ou
}

// SetConfigType sets the "config_type" field.
func (ou *OrderUpdate) SetConfigType(s string) *OrderUpdate {
	ou.mutation.SetConfigType(s)
	return ou
}

// SetRoomNo sets the "room_no" field.
func (ou *OrderUpdate) SetRoomNo(s string) *OrderUpdate {
	ou.mutation.SetRoomNo(s)
	return ou
}

// SetBuyer sets the "buyer" field.
func (ou *OrderUpdate) SetBuyer(s string) *OrderUpdate {
	ou.mutation.SetBuyer(s)
	return ou
}

// SetFinalPrice sets the "final_price" field.
func (ou *OrderUpdate) SetFinalPrice(f float32) *OrderUpdate {
	ou.mutation.ResetFinalPrice()
	ou.mutation.SetFinalPrice(f)
	return ou
}

// AddFinalPrice adds f to the "final_price" field.
func (ou *OrderUpdate) AddFinalPrice(f float32) *OrderUpdate {
	ou.mutation.AddFinalPrice(f)
	return ou
}

// SetActualPrice sets the "actual_price" field.
func (ou *OrderUpdate) SetActualPrice(f float32) *OrderUpdate {
	ou.mutation.ResetActualPrice()
	ou.mutation.SetActualPrice(f)
	return ou
}

// AddActualPrice adds f to the "actual_price" field.
func (ou *OrderUpdate) AddActualPrice(f float32) *OrderUpdate {
	ou.mutation.AddActualPrice(f)
	return ou
}

// SetDepositDate sets the "deposit_date" field.
func (ou *OrderUpdate) SetDepositDate(t time.Time) *OrderUpdate {
	ou.mutation.SetDepositDate(t)
	return ou
}

// SetNillableDepositDate sets the "deposit_date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDepositDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDepositDate(*t)
	}
	return ou
}

// SetTransactionDate sets the "transaction_date" field.
func (ou *OrderUpdate) SetTransactionDate(t time.Time) *OrderUpdate {
	ou.mutation.SetTransactionDate(t)
	return ou
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTransactionDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetTransactionDate(*t)
	}
	return ou
}

// SetFeeScale sets the "fee_scale" field.
func (ou *OrderUpdate) SetFeeScale(f float32) *OrderUpdate {
	ou.mutation.ResetFeeScale()
	ou.mutation.SetFeeScale(f)
	return ou
}

// AddFeeScale adds f to the "fee_scale" field.
func (ou *OrderUpdate) AddFeeScale(f float32) *OrderUpdate {
	ou.mutation.AddFeeScale(f)
	return ou
}

// SetDischargeFee sets the "discharge_fee" field.
func (ou *OrderUpdate) SetDischargeFee(f float32) *OrderUpdate {
	ou.mutation.ResetDischargeFee()
	ou.mutation.SetDischargeFee(f)
	return ou
}

// AddDischargeFee adds f to the "discharge_fee" field.
func (ou *OrderUpdate) AddDischargeFee(f float32) *OrderUpdate {
	ou.mutation.AddDischargeFee(f)
	return ou
}

// SetForwardFee sets the "forward_fee" field.
func (ou *OrderUpdate) SetForwardFee(f float32) *OrderUpdate {
	ou.mutation.ResetForwardFee()
	ou.mutation.SetForwardFee(f)
	return ou
}

// AddForwardFee adds f to the "forward_fee" field.
func (ou *OrderUpdate) AddForwardFee(f float32) *OrderUpdate {
	ou.mutation.AddForwardFee(f)
	return ou
}

// SetReceivableFee sets the "receivable_fee" field.
func (ou *OrderUpdate) SetReceivableFee(f float32) *OrderUpdate {
	ou.mutation.ResetReceivableFee()
	ou.mutation.SetReceivableFee(f)
	return ou
}

// AddReceivableFee adds f to the "receivable_fee" field.
func (ou *OrderUpdate) AddReceivableFee(f float32) *OrderUpdate {
	ou.mutation.AddReceivableFee(f)
	return ou
}

// SetInvoiced sets the "invoiced" field.
func (ou *OrderUpdate) SetInvoiced(f float32) *OrderUpdate {
	ou.mutation.ResetInvoiced()
	ou.mutation.SetInvoiced(f)
	return ou
}

// AddInvoiced adds f to the "invoiced" field.
func (ou *OrderUpdate) AddInvoiced(f float32) *OrderUpdate {
	ou.mutation.AddInvoiced(f)
	return ou
}

// SetNotInvoiced sets the "not_invoiced" field.
func (ou *OrderUpdate) SetNotInvoiced(f float32) *OrderUpdate {
	ou.mutation.ResetNotInvoiced()
	ou.mutation.SetNotInvoiced(f)
	return ou
}

// AddNotInvoiced adds f to the "not_invoiced" field.
func (ou *OrderUpdate) AddNotInvoiced(f float32) *OrderUpdate {
	ou.mutation.AddNotInvoiced(f)
	return ou
}

// SetReceived sets the "received" field.
func (ou *OrderUpdate) SetReceived(f float32) *OrderUpdate {
	ou.mutation.ResetReceived()
	ou.mutation.SetReceived(f)
	return ou
}

// AddReceived adds f to the "received" field.
func (ou *OrderUpdate) AddReceived(f float32) *OrderUpdate {
	ou.mutation.AddReceived(f)
	return ou
}

// SetNotReceived sets the "not_received" field.
func (ou *OrderUpdate) SetNotReceived(f float32) *OrderUpdate {
	ou.mutation.ResetNotReceived()
	ou.mutation.SetNotReceived(f)
	return ou
}

// AddNotReceived adds f to the "not_received" field.
func (ou *OrderUpdate) AddNotReceived(f float32) *OrderUpdate {
	ou.mutation.AddNotReceived(f)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(s string) *OrderUpdate {
	ou.mutation.SetStatus(s)
	return ou
}

// SetReserve sets the "reserve" field.
func (ou *OrderUpdate) SetReserve(s string) *OrderUpdate {
	ou.mutation.SetReserve(s)
	return ou
}

// SetReservePrice sets the "reserve_price" field.
func (ou *OrderUpdate) SetReservePrice(f float32) *OrderUpdate {
	ou.mutation.ResetReservePrice()
	ou.mutation.SetReservePrice(f)
	return ou
}

// AddReservePrice adds f to the "reserve_price" field.
func (ou *OrderUpdate) AddReservePrice(f float32) *OrderUpdate {
	ou.mutation.AddReservePrice(f)
	return ou
}

// SetIsDelete sets the "is_delete" field.
func (ou *OrderUpdate) SetIsDelete(s string) *OrderUpdate {
	ou.mutation.SetIsDelete(s)
	return ou
}

// SetRemark sets the "remark" field.
func (ou *OrderUpdate) SetRemark(s string) *OrderUpdate {
	ou.mutation.SetRemark(s)
	return ou
}

// SetPaper sets the "paper" field.
func (ou *OrderUpdate) SetPaper(s string) *OrderUpdate {
	ou.mutation.SetPaper(s)
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetCreatedBy sets the "created_by" field.
func (ou *OrderUpdate) SetCreatedBy(s string) *OrderUpdate {
	ou.mutation.SetCreatedBy(s)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUpdatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OrderUpdate) SetUpdatedBy(s string) *OrderUpdate {
	ou.mutation.SetUpdatedBy(s)
	return ou
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ou *OrderUpdate) AddUserIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.AddUserIDs(ids...)
	return ou
}

// AddUsers adds the "users" edges to the User entity.
func (ou *OrderUpdate) AddUsers(u ...*User) *OrderUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (ou *OrderUpdate) ClearUsers() *OrderUpdate {
	ou.mutation.ClearUsers()
	return ou
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ou *OrderUpdate) RemoveUserIDs(ids ...uuid.UUID) *OrderUpdate {
	ou.mutation.RemoveUserIDs(ids...)
	return ou
}

// RemoveUsers removes "users" edges to User entities.
func (ou *OrderUpdate) RemoveUsers(u ...*User) *OrderUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldClientID,
		})
	}
	if value, ok := ou.mutation.ConfigType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldConfigType,
		})
	}
	if value, ok := ou.mutation.RoomNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRoomNo,
		})
	}
	if value, ok := ou.mutation.Buyer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldBuyer,
		})
	}
	if value, ok := ou.mutation.FinalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFinalPrice,
		})
	}
	if value, ok := ou.mutation.AddedFinalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFinalPrice,
		})
	}
	if value, ok := ou.mutation.ActualPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldActualPrice,
		})
	}
	if value, ok := ou.mutation.AddedActualPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldActualPrice,
		})
	}
	if value, ok := ou.mutation.DepositDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDepositDate,
		})
	}
	if value, ok := ou.mutation.TransactionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldTransactionDate,
		})
	}
	if value, ok := ou.mutation.FeeScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFeeScale,
		})
	}
	if value, ok := ou.mutation.AddedFeeScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFeeScale,
		})
	}
	if value, ok := ou.mutation.DischargeFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldDischargeFee,
		})
	}
	if value, ok := ou.mutation.AddedDischargeFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldDischargeFee,
		})
	}
	if value, ok := ou.mutation.ForwardFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldForwardFee,
		})
	}
	if value, ok := ou.mutation.AddedForwardFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldForwardFee,
		})
	}
	if value, ok := ou.mutation.ReceivableFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceivableFee,
		})
	}
	if value, ok := ou.mutation.AddedReceivableFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceivableFee,
		})
	}
	if value, ok := ou.mutation.Invoiced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldInvoiced,
		})
	}
	if value, ok := ou.mutation.AddedInvoiced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldInvoiced,
		})
	}
	if value, ok := ou.mutation.NotInvoiced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotInvoiced,
		})
	}
	if value, ok := ou.mutation.AddedNotInvoiced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotInvoiced,
		})
	}
	if value, ok := ou.mutation.Received(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceived,
		})
	}
	if value, ok := ou.mutation.AddedReceived(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceived,
		})
	}
	if value, ok := ou.mutation.NotReceived(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotReceived,
		})
	}
	if value, ok := ou.mutation.AddedNotReceived(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotReceived,
		})
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ou.mutation.Reserve(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldReserve,
		})
	}
	if value, ok := ou.mutation.ReservePrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReservePrice,
		})
	}
	if value, ok := ou.mutation.AddedReservePrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReservePrice,
		})
	}
	if value, ok := ou.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldIsDelete,
		})
	}
	if value, ok := ou.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRemark,
		})
	}
	if value, ok := ou.mutation.Paper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaper,
		})
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCreatedAt,
		})
	}
	if value, ok := ou.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldCreatedBy,
		})
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldUpdatedBy,
		})
	}
	if ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.UsersTable,
			Columns: order.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.UsersTable,
			Columns: order.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.UsersTable,
			Columns: order.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetClientID sets the "client_id" field.
func (ouo *OrderUpdateOne) SetClientID(s string) *OrderUpdateOne {
	ouo.mutation.SetClientID(s)
	return ouo
}

// SetConfigType sets the "config_type" field.
func (ouo *OrderUpdateOne) SetConfigType(s string) *OrderUpdateOne {
	ouo.mutation.SetConfigType(s)
	return ouo
}

// SetRoomNo sets the "room_no" field.
func (ouo *OrderUpdateOne) SetRoomNo(s string) *OrderUpdateOne {
	ouo.mutation.SetRoomNo(s)
	return ouo
}

// SetBuyer sets the "buyer" field.
func (ouo *OrderUpdateOne) SetBuyer(s string) *OrderUpdateOne {
	ouo.mutation.SetBuyer(s)
	return ouo
}

// SetFinalPrice sets the "final_price" field.
func (ouo *OrderUpdateOne) SetFinalPrice(f float32) *OrderUpdateOne {
	ouo.mutation.ResetFinalPrice()
	ouo.mutation.SetFinalPrice(f)
	return ouo
}

// AddFinalPrice adds f to the "final_price" field.
func (ouo *OrderUpdateOne) AddFinalPrice(f float32) *OrderUpdateOne {
	ouo.mutation.AddFinalPrice(f)
	return ouo
}

// SetActualPrice sets the "actual_price" field.
func (ouo *OrderUpdateOne) SetActualPrice(f float32) *OrderUpdateOne {
	ouo.mutation.ResetActualPrice()
	ouo.mutation.SetActualPrice(f)
	return ouo
}

// AddActualPrice adds f to the "actual_price" field.
func (ouo *OrderUpdateOne) AddActualPrice(f float32) *OrderUpdateOne {
	ouo.mutation.AddActualPrice(f)
	return ouo
}

// SetDepositDate sets the "deposit_date" field.
func (ouo *OrderUpdateOne) SetDepositDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDepositDate(t)
	return ouo
}

// SetNillableDepositDate sets the "deposit_date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDepositDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDepositDate(*t)
	}
	return ouo
}

// SetTransactionDate sets the "transaction_date" field.
func (ouo *OrderUpdateOne) SetTransactionDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetTransactionDate(t)
	return ouo
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTransactionDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetTransactionDate(*t)
	}
	return ouo
}

// SetFeeScale sets the "fee_scale" field.
func (ouo *OrderUpdateOne) SetFeeScale(f float32) *OrderUpdateOne {
	ouo.mutation.ResetFeeScale()
	ouo.mutation.SetFeeScale(f)
	return ouo
}

// AddFeeScale adds f to the "fee_scale" field.
func (ouo *OrderUpdateOne) AddFeeScale(f float32) *OrderUpdateOne {
	ouo.mutation.AddFeeScale(f)
	return ouo
}

// SetDischargeFee sets the "discharge_fee" field.
func (ouo *OrderUpdateOne) SetDischargeFee(f float32) *OrderUpdateOne {
	ouo.mutation.ResetDischargeFee()
	ouo.mutation.SetDischargeFee(f)
	return ouo
}

// AddDischargeFee adds f to the "discharge_fee" field.
func (ouo *OrderUpdateOne) AddDischargeFee(f float32) *OrderUpdateOne {
	ouo.mutation.AddDischargeFee(f)
	return ouo
}

// SetForwardFee sets the "forward_fee" field.
func (ouo *OrderUpdateOne) SetForwardFee(f float32) *OrderUpdateOne {
	ouo.mutation.ResetForwardFee()
	ouo.mutation.SetForwardFee(f)
	return ouo
}

// AddForwardFee adds f to the "forward_fee" field.
func (ouo *OrderUpdateOne) AddForwardFee(f float32) *OrderUpdateOne {
	ouo.mutation.AddForwardFee(f)
	return ouo
}

// SetReceivableFee sets the "receivable_fee" field.
func (ouo *OrderUpdateOne) SetReceivableFee(f float32) *OrderUpdateOne {
	ouo.mutation.ResetReceivableFee()
	ouo.mutation.SetReceivableFee(f)
	return ouo
}

// AddReceivableFee adds f to the "receivable_fee" field.
func (ouo *OrderUpdateOne) AddReceivableFee(f float32) *OrderUpdateOne {
	ouo.mutation.AddReceivableFee(f)
	return ouo
}

// SetInvoiced sets the "invoiced" field.
func (ouo *OrderUpdateOne) SetInvoiced(f float32) *OrderUpdateOne {
	ouo.mutation.ResetInvoiced()
	ouo.mutation.SetInvoiced(f)
	return ouo
}

// AddInvoiced adds f to the "invoiced" field.
func (ouo *OrderUpdateOne) AddInvoiced(f float32) *OrderUpdateOne {
	ouo.mutation.AddInvoiced(f)
	return ouo
}

// SetNotInvoiced sets the "not_invoiced" field.
func (ouo *OrderUpdateOne) SetNotInvoiced(f float32) *OrderUpdateOne {
	ouo.mutation.ResetNotInvoiced()
	ouo.mutation.SetNotInvoiced(f)
	return ouo
}

// AddNotInvoiced adds f to the "not_invoiced" field.
func (ouo *OrderUpdateOne) AddNotInvoiced(f float32) *OrderUpdateOne {
	ouo.mutation.AddNotInvoiced(f)
	return ouo
}

// SetReceived sets the "received" field.
func (ouo *OrderUpdateOne) SetReceived(f float32) *OrderUpdateOne {
	ouo.mutation.ResetReceived()
	ouo.mutation.SetReceived(f)
	return ouo
}

// AddReceived adds f to the "received" field.
func (ouo *OrderUpdateOne) AddReceived(f float32) *OrderUpdateOne {
	ouo.mutation.AddReceived(f)
	return ouo
}

// SetNotReceived sets the "not_received" field.
func (ouo *OrderUpdateOne) SetNotReceived(f float32) *OrderUpdateOne {
	ouo.mutation.ResetNotReceived()
	ouo.mutation.SetNotReceived(f)
	return ouo
}

// AddNotReceived adds f to the "not_received" field.
func (ouo *OrderUpdateOne) AddNotReceived(f float32) *OrderUpdateOne {
	ouo.mutation.AddNotReceived(f)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetStatus(s)
	return ouo
}

// SetReserve sets the "reserve" field.
func (ouo *OrderUpdateOne) SetReserve(s string) *OrderUpdateOne {
	ouo.mutation.SetReserve(s)
	return ouo
}

// SetReservePrice sets the "reserve_price" field.
func (ouo *OrderUpdateOne) SetReservePrice(f float32) *OrderUpdateOne {
	ouo.mutation.ResetReservePrice()
	ouo.mutation.SetReservePrice(f)
	return ouo
}

// AddReservePrice adds f to the "reserve_price" field.
func (ouo *OrderUpdateOne) AddReservePrice(f float32) *OrderUpdateOne {
	ouo.mutation.AddReservePrice(f)
	return ouo
}

// SetIsDelete sets the "is_delete" field.
func (ouo *OrderUpdateOne) SetIsDelete(s string) *OrderUpdateOne {
	ouo.mutation.SetIsDelete(s)
	return ouo
}

// SetRemark sets the "remark" field.
func (ouo *OrderUpdateOne) SetRemark(s string) *OrderUpdateOne {
	ouo.mutation.SetRemark(s)
	return ouo
}

// SetPaper sets the "paper" field.
func (ouo *OrderUpdateOne) SetPaper(s string) *OrderUpdateOne {
	ouo.mutation.SetPaper(s)
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetCreatedBy sets the "created_by" field.
func (ouo *OrderUpdateOne) SetCreatedBy(s string) *OrderUpdateOne {
	ouo.mutation.SetCreatedBy(s)
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OrderUpdateOne) SetUpdatedBy(s string) *OrderUpdateOne {
	ouo.mutation.SetUpdatedBy(s)
	return ouo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ouo *OrderUpdateOne) AddUserIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.AddUserIDs(ids...)
	return ouo
}

// AddUsers adds the "users" edges to the User entity.
func (ouo *OrderUpdateOne) AddUsers(u ...*User) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (ouo *OrderUpdateOne) ClearUsers() *OrderUpdateOne {
	ouo.mutation.ClearUsers()
	return ouo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ouo *OrderUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *OrderUpdateOne {
	ouo.mutation.RemoveUserIDs(ids...)
	return ouo
}

// RemoveUsers removes "users" edges to User entities.
func (ouo *OrderUpdateOne) RemoveUsers(u ...*User) *OrderUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Order.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldClientID,
		})
	}
	if value, ok := ouo.mutation.ConfigType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldConfigType,
		})
	}
	if value, ok := ouo.mutation.RoomNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRoomNo,
		})
	}
	if value, ok := ouo.mutation.Buyer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldBuyer,
		})
	}
	if value, ok := ouo.mutation.FinalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFinalPrice,
		})
	}
	if value, ok := ouo.mutation.AddedFinalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFinalPrice,
		})
	}
	if value, ok := ouo.mutation.ActualPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldActualPrice,
		})
	}
	if value, ok := ouo.mutation.AddedActualPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldActualPrice,
		})
	}
	if value, ok := ouo.mutation.DepositDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDepositDate,
		})
	}
	if value, ok := ouo.mutation.TransactionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldTransactionDate,
		})
	}
	if value, ok := ouo.mutation.FeeScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFeeScale,
		})
	}
	if value, ok := ouo.mutation.AddedFeeScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFeeScale,
		})
	}
	if value, ok := ouo.mutation.DischargeFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldDischargeFee,
		})
	}
	if value, ok := ouo.mutation.AddedDischargeFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldDischargeFee,
		})
	}
	if value, ok := ouo.mutation.ForwardFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldForwardFee,
		})
	}
	if value, ok := ouo.mutation.AddedForwardFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldForwardFee,
		})
	}
	if value, ok := ouo.mutation.ReceivableFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceivableFee,
		})
	}
	if value, ok := ouo.mutation.AddedReceivableFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceivableFee,
		})
	}
	if value, ok := ouo.mutation.Invoiced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldInvoiced,
		})
	}
	if value, ok := ouo.mutation.AddedInvoiced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldInvoiced,
		})
	}
	if value, ok := ouo.mutation.NotInvoiced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotInvoiced,
		})
	}
	if value, ok := ouo.mutation.AddedNotInvoiced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotInvoiced,
		})
	}
	if value, ok := ouo.mutation.Received(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceived,
		})
	}
	if value, ok := ouo.mutation.AddedReceived(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceived,
		})
	}
	if value, ok := ouo.mutation.NotReceived(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotReceived,
		})
	}
	if value, ok := ouo.mutation.AddedNotReceived(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotReceived,
		})
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ouo.mutation.Reserve(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldReserve,
		})
	}
	if value, ok := ouo.mutation.ReservePrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReservePrice,
		})
	}
	if value, ok := ouo.mutation.AddedReservePrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReservePrice,
		})
	}
	if value, ok := ouo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldIsDelete,
		})
	}
	if value, ok := ouo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRemark,
		})
	}
	if value, ok := ouo.mutation.Paper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaper,
		})
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCreatedAt,
		})
	}
	if value, ok := ouo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldCreatedBy,
		})
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldUpdatedBy,
		})
	}
	if ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.UsersTable,
			Columns: order.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.UsersTable,
			Columns: order.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.UsersTable,
			Columns: order.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
