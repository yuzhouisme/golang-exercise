// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-template/internal/data/ent/order"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// ConfigType holds the value of the "config_type" field.
	ConfigType string `json:"config_type,omitempty"`
	// RoomNo holds the value of the "room_no" field.
	RoomNo string `json:"room_no,omitempty"`
	// Buyer holds the value of the "buyer" field.
	Buyer string `json:"buyer,omitempty"`
	// FinalPrice holds the value of the "final_price" field.
	FinalPrice float32 `json:"final_price,omitempty"`
	// ActualPrice holds the value of the "actual_price" field.
	ActualPrice float32 `json:"actual_price,omitempty"`
	// DepositDate holds the value of the "deposit_date" field.
	DepositDate time.Time `json:"deposit_date,omitempty"`
	// TransactionDate holds the value of the "transaction_date" field.
	TransactionDate time.Time `json:"transaction_date,omitempty"`
	// FeeScale holds the value of the "fee_scale" field.
	FeeScale float32 `json:"fee_scale,omitempty"`
	// DischargeFee holds the value of the "discharge_fee" field.
	DischargeFee float32 `json:"discharge_fee,omitempty"`
	// ForwardFee holds the value of the "forward_fee" field.
	ForwardFee float32 `json:"forward_fee,omitempty"`
	// ReceivableFee holds the value of the "receivable_fee" field.
	ReceivableFee float32 `json:"receivable_fee,omitempty"`
	// Invoiced holds the value of the "invoiced" field.
	Invoiced float32 `json:"invoiced,omitempty"`
	// NotInvoiced holds the value of the "not_invoiced" field.
	NotInvoiced float32 `json:"not_invoiced,omitempty"`
	// Received holds the value of the "received" field.
	Received float32 `json:"received,omitempty"`
	// NotReceived holds the value of the "not_received" field.
	NotReceived float32 `json:"not_received,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Reserve holds the value of the "reserve" field.
	Reserve string `json:"reserve,omitempty"`
	// ReservePrice holds the value of the "reserve_price" field.
	ReservePrice float32 `json:"reserve_price,omitempty"`
	// IsDelete holds the value of the "is_delete" field.
	IsDelete string `json:"is_delete,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Paper holds the value of the "paper" field.
	Paper string `json:"paper,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges OrderEdges `json:"edges"`
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldFinalPrice, order.FieldActualPrice, order.FieldFeeScale, order.FieldDischargeFee, order.FieldForwardFee, order.FieldReceivableFee, order.FieldInvoiced, order.FieldNotInvoiced, order.FieldReceived, order.FieldNotReceived, order.FieldReservePrice:
			values[i] = new(sql.NullFloat64)
		case order.FieldID:
			values[i] = new(sql.NullInt64)
		case order.FieldClientID, order.FieldConfigType, order.FieldRoomNo, order.FieldBuyer, order.FieldStatus, order.FieldReserve, order.FieldIsDelete, order.FieldRemark, order.FieldPaper, order.FieldCreatedBy, order.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case order.FieldDepositDate, order.FieldTransactionDate, order.FieldCreatedAt, order.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int64(value.Int64)
		case order.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				o.ClientID = value.String
			}
		case order.FieldConfigType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_type", values[i])
			} else if value.Valid {
				o.ConfigType = value.String
			}
		case order.FieldRoomNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_no", values[i])
			} else if value.Valid {
				o.RoomNo = value.String
			}
		case order.FieldBuyer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field buyer", values[i])
			} else if value.Valid {
				o.Buyer = value.String
			}
		case order.FieldFinalPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field final_price", values[i])
			} else if value.Valid {
				o.FinalPrice = float32(value.Float64)
			}
		case order.FieldActualPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field actual_price", values[i])
			} else if value.Valid {
				o.ActualPrice = float32(value.Float64)
			}
		case order.FieldDepositDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_date", values[i])
			} else if value.Valid {
				o.DepositDate = value.Time
			}
		case order.FieldTransactionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_date", values[i])
			} else if value.Valid {
				o.TransactionDate = value.Time
			}
		case order.FieldFeeScale:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee_scale", values[i])
			} else if value.Valid {
				o.FeeScale = float32(value.Float64)
			}
		case order.FieldDischargeFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discharge_fee", values[i])
			} else if value.Valid {
				o.DischargeFee = float32(value.Float64)
			}
		case order.FieldForwardFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field forward_fee", values[i])
			} else if value.Valid {
				o.ForwardFee = float32(value.Float64)
			}
		case order.FieldReceivableFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field receivable_fee", values[i])
			} else if value.Valid {
				o.ReceivableFee = float32(value.Float64)
			}
		case order.FieldInvoiced:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field invoiced", values[i])
			} else if value.Valid {
				o.Invoiced = float32(value.Float64)
			}
		case order.FieldNotInvoiced:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field not_invoiced", values[i])
			} else if value.Valid {
				o.NotInvoiced = float32(value.Float64)
			}
		case order.FieldReceived:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field received", values[i])
			} else if value.Valid {
				o.Received = float32(value.Float64)
			}
		case order.FieldNotReceived:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field not_received", values[i])
			} else if value.Valid {
				o.NotReceived = float32(value.Float64)
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = value.String
			}
		case order.FieldReserve:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reserve", values[i])
			} else if value.Valid {
				o.Reserve = value.String
			}
		case order.FieldReservePrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reserve_price", values[i])
			} else if value.Valid {
				o.ReservePrice = float32(value.Float64)
			}
		case order.FieldIsDelete:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_delete", values[i])
			} else if value.Valid {
				o.IsDelete = value.String
			}
		case order.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				o.Remark = value.String
			}
		case order.FieldPaper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paper", values[i])
			} else if value.Valid {
				o.Paper = value.String
			}
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				o.CreatedBy = value.String
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				o.UpdatedBy = value.String
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Order entity.
func (o *Order) QueryUsers() *UserQuery {
	return (&OrderClient{config: o.config}).QueryUsers(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", client_id=")
	builder.WriteString(o.ClientID)
	builder.WriteString(", config_type=")
	builder.WriteString(o.ConfigType)
	builder.WriteString(", room_no=")
	builder.WriteString(o.RoomNo)
	builder.WriteString(", buyer=")
	builder.WriteString(o.Buyer)
	builder.WriteString(", final_price=")
	builder.WriteString(fmt.Sprintf("%v", o.FinalPrice))
	builder.WriteString(", actual_price=")
	builder.WriteString(fmt.Sprintf("%v", o.ActualPrice))
	builder.WriteString(", deposit_date=")
	builder.WriteString(o.DepositDate.Format(time.ANSIC))
	builder.WriteString(", transaction_date=")
	builder.WriteString(o.TransactionDate.Format(time.ANSIC))
	builder.WriteString(", fee_scale=")
	builder.WriteString(fmt.Sprintf("%v", o.FeeScale))
	builder.WriteString(", discharge_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.DischargeFee))
	builder.WriteString(", forward_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.ForwardFee))
	builder.WriteString(", receivable_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.ReceivableFee))
	builder.WriteString(", invoiced=")
	builder.WriteString(fmt.Sprintf("%v", o.Invoiced))
	builder.WriteString(", not_invoiced=")
	builder.WriteString(fmt.Sprintf("%v", o.NotInvoiced))
	builder.WriteString(", received=")
	builder.WriteString(fmt.Sprintf("%v", o.Received))
	builder.WriteString(", not_received=")
	builder.WriteString(fmt.Sprintf("%v", o.NotReceived))
	builder.WriteString(", status=")
	builder.WriteString(o.Status)
	builder.WriteString(", reserve=")
	builder.WriteString(o.Reserve)
	builder.WriteString(", reserve_price=")
	builder.WriteString(fmt.Sprintf("%v", o.ReservePrice))
	builder.WriteString(", is_delete=")
	builder.WriteString(o.IsDelete)
	builder.WriteString(", remark=")
	builder.WriteString(o.Remark)
	builder.WriteString(", paper=")
	builder.WriteString(o.Paper)
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(o.CreatedBy)
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(o.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
