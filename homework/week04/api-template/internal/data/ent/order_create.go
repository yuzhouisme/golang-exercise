// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-template/internal/data/ent/order"
	"api-template/internal/data/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (oc *OrderCreate) SetClientID(s string) *OrderCreate {
	oc.mutation.SetClientID(s)
	return oc
}

// SetConfigType sets the "config_type" field.
func (oc *OrderCreate) SetConfigType(s string) *OrderCreate {
	oc.mutation.SetConfigType(s)
	return oc
}

// SetRoomNo sets the "room_no" field.
func (oc *OrderCreate) SetRoomNo(s string) *OrderCreate {
	oc.mutation.SetRoomNo(s)
	return oc
}

// SetBuyer sets the "buyer" field.
func (oc *OrderCreate) SetBuyer(s string) *OrderCreate {
	oc.mutation.SetBuyer(s)
	return oc
}

// SetFinalPrice sets the "final_price" field.
func (oc *OrderCreate) SetFinalPrice(f float32) *OrderCreate {
	oc.mutation.SetFinalPrice(f)
	return oc
}

// SetActualPrice sets the "actual_price" field.
func (oc *OrderCreate) SetActualPrice(f float32) *OrderCreate {
	oc.mutation.SetActualPrice(f)
	return oc
}

// SetDepositDate sets the "deposit_date" field.
func (oc *OrderCreate) SetDepositDate(t time.Time) *OrderCreate {
	oc.mutation.SetDepositDate(t)
	return oc
}

// SetNillableDepositDate sets the "deposit_date" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDepositDate(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetDepositDate(*t)
	}
	return oc
}

// SetTransactionDate sets the "transaction_date" field.
func (oc *OrderCreate) SetTransactionDate(t time.Time) *OrderCreate {
	oc.mutation.SetTransactionDate(t)
	return oc
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTransactionDate(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetTransactionDate(*t)
	}
	return oc
}

// SetFeeScale sets the "fee_scale" field.
func (oc *OrderCreate) SetFeeScale(f float32) *OrderCreate {
	oc.mutation.SetFeeScale(f)
	return oc
}

// SetDischargeFee sets the "discharge_fee" field.
func (oc *OrderCreate) SetDischargeFee(f float32) *OrderCreate {
	oc.mutation.SetDischargeFee(f)
	return oc
}

// SetForwardFee sets the "forward_fee" field.
func (oc *OrderCreate) SetForwardFee(f float32) *OrderCreate {
	oc.mutation.SetForwardFee(f)
	return oc
}

// SetReceivableFee sets the "receivable_fee" field.
func (oc *OrderCreate) SetReceivableFee(f float32) *OrderCreate {
	oc.mutation.SetReceivableFee(f)
	return oc
}

// SetInvoiced sets the "invoiced" field.
func (oc *OrderCreate) SetInvoiced(f float32) *OrderCreate {
	oc.mutation.SetInvoiced(f)
	return oc
}

// SetNotInvoiced sets the "not_invoiced" field.
func (oc *OrderCreate) SetNotInvoiced(f float32) *OrderCreate {
	oc.mutation.SetNotInvoiced(f)
	return oc
}

// SetReceived sets the "received" field.
func (oc *OrderCreate) SetReceived(f float32) *OrderCreate {
	oc.mutation.SetReceived(f)
	return oc
}

// SetNotReceived sets the "not_received" field.
func (oc *OrderCreate) SetNotReceived(f float32) *OrderCreate {
	oc.mutation.SetNotReceived(f)
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(s string) *OrderCreate {
	oc.mutation.SetStatus(s)
	return oc
}

// SetReserve sets the "reserve" field.
func (oc *OrderCreate) SetReserve(s string) *OrderCreate {
	oc.mutation.SetReserve(s)
	return oc
}

// SetReservePrice sets the "reserve_price" field.
func (oc *OrderCreate) SetReservePrice(f float32) *OrderCreate {
	oc.mutation.SetReservePrice(f)
	return oc
}

// SetIsDelete sets the "is_delete" field.
func (oc *OrderCreate) SetIsDelete(s string) *OrderCreate {
	oc.mutation.SetIsDelete(s)
	return oc
}

// SetRemark sets the "remark" field.
func (oc *OrderCreate) SetRemark(s string) *OrderCreate {
	oc.mutation.SetRemark(s)
	return oc
}

// SetPaper sets the "paper" field.
func (oc *OrderCreate) SetPaper(s string) *OrderCreate {
	oc.mutation.SetPaper(s)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetCreatedBy sets the "created_by" field.
func (oc *OrderCreate) SetCreatedBy(s string) *OrderCreate {
	oc.mutation.SetCreatedBy(s)
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetUpdatedBy sets the "updated_by" field.
func (oc *OrderCreate) SetUpdatedBy(s string) *OrderCreate {
	oc.mutation.SetUpdatedBy(s)
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(i int64) *OrderCreate {
	oc.mutation.SetID(i)
	return oc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (oc *OrderCreate) AddUserIDs(ids ...uuid.UUID) *OrderCreate {
	oc.mutation.AddUserIDs(ids...)
	return oc
}

// AddUsers adds the "users" edges to the User entity.
func (oc *OrderCreate) AddUsers(u ...*User) *OrderCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.DepositDate(); !ok {
		v := order.DefaultDepositDate()
		oc.mutation.SetDepositDate(v)
	}
	if _, ok := oc.mutation.TransactionDate(); !ok {
		v := order.DefaultTransactionDate()
		oc.mutation.SetTransactionDate(v)
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "client_id"`)}
	}
	if _, ok := oc.mutation.ConfigType(); !ok {
		return &ValidationError{Name: "config_type", err: errors.New(`ent: missing required field "config_type"`)}
	}
	if _, ok := oc.mutation.RoomNo(); !ok {
		return &ValidationError{Name: "room_no", err: errors.New(`ent: missing required field "room_no"`)}
	}
	if _, ok := oc.mutation.Buyer(); !ok {
		return &ValidationError{Name: "buyer", err: errors.New(`ent: missing required field "buyer"`)}
	}
	if _, ok := oc.mutation.FinalPrice(); !ok {
		return &ValidationError{Name: "final_price", err: errors.New(`ent: missing required field "final_price"`)}
	}
	if _, ok := oc.mutation.ActualPrice(); !ok {
		return &ValidationError{Name: "actual_price", err: errors.New(`ent: missing required field "actual_price"`)}
	}
	if _, ok := oc.mutation.DepositDate(); !ok {
		return &ValidationError{Name: "deposit_date", err: errors.New(`ent: missing required field "deposit_date"`)}
	}
	if _, ok := oc.mutation.TransactionDate(); !ok {
		return &ValidationError{Name: "transaction_date", err: errors.New(`ent: missing required field "transaction_date"`)}
	}
	if _, ok := oc.mutation.FeeScale(); !ok {
		return &ValidationError{Name: "fee_scale", err: errors.New(`ent: missing required field "fee_scale"`)}
	}
	if _, ok := oc.mutation.DischargeFee(); !ok {
		return &ValidationError{Name: "discharge_fee", err: errors.New(`ent: missing required field "discharge_fee"`)}
	}
	if _, ok := oc.mutation.ForwardFee(); !ok {
		return &ValidationError{Name: "forward_fee", err: errors.New(`ent: missing required field "forward_fee"`)}
	}
	if _, ok := oc.mutation.ReceivableFee(); !ok {
		return &ValidationError{Name: "receivable_fee", err: errors.New(`ent: missing required field "receivable_fee"`)}
	}
	if _, ok := oc.mutation.Invoiced(); !ok {
		return &ValidationError{Name: "invoiced", err: errors.New(`ent: missing required field "invoiced"`)}
	}
	if _, ok := oc.mutation.NotInvoiced(); !ok {
		return &ValidationError{Name: "not_invoiced", err: errors.New(`ent: missing required field "not_invoiced"`)}
	}
	if _, ok := oc.mutation.Received(); !ok {
		return &ValidationError{Name: "received", err: errors.New(`ent: missing required field "received"`)}
	}
	if _, ok := oc.mutation.NotReceived(); !ok {
		return &ValidationError{Name: "not_received", err: errors.New(`ent: missing required field "not_received"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if _, ok := oc.mutation.Reserve(); !ok {
		return &ValidationError{Name: "reserve", err: errors.New(`ent: missing required field "reserve"`)}
	}
	if _, ok := oc.mutation.ReservePrice(); !ok {
		return &ValidationError{Name: "reserve_price", err: errors.New(`ent: missing required field "reserve_price"`)}
	}
	if _, ok := oc.mutation.IsDelete(); !ok {
		return &ValidationError{Name: "is_delete", err: errors.New(`ent: missing required field "is_delete"`)}
	}
	if _, ok := oc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "remark"`)}
	}
	if _, ok := oc.mutation.Paper(); !ok {
		return &ValidationError{Name: "paper", err: errors.New(`ent: missing required field "paper"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := oc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "created_by"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := oc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "updated_by"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: order.FieldID,
			},
		}
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.ClientID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldClientID,
		})
		_node.ClientID = value
	}
	if value, ok := oc.mutation.ConfigType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldConfigType,
		})
		_node.ConfigType = value
	}
	if value, ok := oc.mutation.RoomNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRoomNo,
		})
		_node.RoomNo = value
	}
	if value, ok := oc.mutation.Buyer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldBuyer,
		})
		_node.Buyer = value
	}
	if value, ok := oc.mutation.FinalPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFinalPrice,
		})
		_node.FinalPrice = value
	}
	if value, ok := oc.mutation.ActualPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldActualPrice,
		})
		_node.ActualPrice = value
	}
	if value, ok := oc.mutation.DepositDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDepositDate,
		})
		_node.DepositDate = value
	}
	if value, ok := oc.mutation.TransactionDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldTransactionDate,
		})
		_node.TransactionDate = value
	}
	if value, ok := oc.mutation.FeeScale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldFeeScale,
		})
		_node.FeeScale = value
	}
	if value, ok := oc.mutation.DischargeFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldDischargeFee,
		})
		_node.DischargeFee = value
	}
	if value, ok := oc.mutation.ForwardFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldForwardFee,
		})
		_node.ForwardFee = value
	}
	if value, ok := oc.mutation.ReceivableFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceivableFee,
		})
		_node.ReceivableFee = value
	}
	if value, ok := oc.mutation.Invoiced(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldInvoiced,
		})
		_node.Invoiced = value
	}
	if value, ok := oc.mutation.NotInvoiced(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotInvoiced,
		})
		_node.NotInvoiced = value
	}
	if value, ok := oc.mutation.Received(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReceived,
		})
		_node.Received = value
	}
	if value, ok := oc.mutation.NotReceived(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldNotReceived,
		})
		_node.NotReceived = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := oc.mutation.Reserve(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldReserve,
		})
		_node.Reserve = value
	}
	if value, ok := oc.mutation.ReservePrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: order.FieldReservePrice,
		})
		_node.ReservePrice = value
	}
	if value, ok := oc.mutation.IsDelete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldIsDelete,
		})
		_node.IsDelete = value
	}
	if value, ok := oc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := oc.mutation.Paper(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaper,
		})
		_node.Paper = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if nodes := oc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.UsersTable,
			Columns: order.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
