// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "config_type", Type: field.TypeString},
		{Name: "room_no", Type: field.TypeString},
		{Name: "buyer", Type: field.TypeString},
		{Name: "final_price", Type: field.TypeFloat32},
		{Name: "actual_price", Type: field.TypeFloat32},
		{Name: "deposit_date", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "transaction_date", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "fee_scale", Type: field.TypeFloat32},
		{Name: "discharge_fee", Type: field.TypeFloat32},
		{Name: "forward_fee", Type: field.TypeFloat32},
		{Name: "receivable_fee", Type: field.TypeFloat32},
		{Name: "invoiced", Type: field.TypeFloat32},
		{Name: "not_invoiced", Type: field.TypeFloat32},
		{Name: "received", Type: field.TypeFloat32},
		{Name: "not_received", Type: field.TypeFloat32},
		{Name: "status", Type: field.TypeString},
		{Name: "reserve", Type: field.TypeString},
		{Name: "reserve_price", Type: field.TypeFloat32},
		{Name: "is_delete", Type: field.TypeString},
		{Name: "remark", Type: field.TypeString},
		{Name: "paper", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "created_by", Type: field.TypeString},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_by", Type: field.TypeString},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "business_name", Type: field.TypeString, Unique: true},
		{Name: "address", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "role_type", Type: field.TypeString},
		{Name: "remark", Type: field.TypeString},
		{Name: "is_valid", Type: field.TypeString},
		{Name: "is_delete", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "created_by", Type: field.TypeString},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_by", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserOrdersColumns holds the columns for the "user_orders" table.
	UserOrdersColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "order_id", Type: field.TypeInt64},
	}
	// UserOrdersTable holds the schema information for the "user_orders" table.
	UserOrdersTable = &schema.Table{
		Name:       "user_orders",
		Columns:    UserOrdersColumns,
		PrimaryKey: []*schema.Column{UserOrdersColumns[0], UserOrdersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_orders_user_id",
				Columns:    []*schema.Column{UserOrdersColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_orders_order_id",
				Columns:    []*schema.Column{UserOrdersColumns[1]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		OrdersTable,
		UsersTable,
		UserOrdersTable,
	}
)

func init() {
	UserOrdersTable.ForeignKeys[0].RefTable = UsersTable
	UserOrdersTable.ForeignKeys[1].RefTable = OrdersTable
}
