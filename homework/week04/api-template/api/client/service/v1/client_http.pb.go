// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ClientHTTPServer interface {
	CreateClient(context.Context, *CreateClientReq) (*CreateClientReply, error)
	DeleteClient(context.Context, *DeleteClientReq) (*DeleteClientReply, error)
	GetClient(context.Context, *GetClientReq) (*GetClientReply, error)
	ListClient(context.Context, *ListClientReq) (*ListClientReply, error)
	SearchClient(context.Context, *SearchClientReq) (*SearchClientReply, error)
	UpdateClient(context.Context, *UpdateClientReq) (*UpdateClientReply, error)
}

func RegisterClientHTTPServer(s *http.Server, srv ClientHTTPServer) {
	r := s.Route("/")
	r.GET("/clients/v1/{id}", _Client_GetClient0_HTTP_Handler(srv))
	r.POST("/clients/v1", _Client_CreateClient0_HTTP_Handler(srv))
	r.PUT("/clients/v1/{id}", _Client_UpdateClient0_HTTP_Handler(srv))
	r.GET("/clients/v1", _Client_ListClient0_HTTP_Handler(srv))
	r.DELETE("/clients/v1", _Client_DeleteClient0_HTTP_Handler(srv))
	r.GET("/clients/v1/search", _Client_SearchClient0_HTTP_Handler(srv))
}

func _Client_GetClient0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClientReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/client.service.v1.Client/GetClient")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClient(ctx, req.(*GetClientReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClientReply)
		return ctx.Result(200, reply)
	}
}

func _Client_CreateClient0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateClientReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/client.service.v1.Client/CreateClient")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateClient(ctx, req.(*CreateClientReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateClientReply)
		return ctx.Result(200, reply)
	}
}

func _Client_UpdateClient0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateClientReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/client.service.v1.Client/UpdateClient")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateClient(ctx, req.(*UpdateClientReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateClientReply)
		return ctx.Result(200, reply)
	}
}

func _Client_ListClient0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListClientReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/client.service.v1.Client/ListClient")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListClient(ctx, req.(*ListClientReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClientReply)
		return ctx.Result(200, reply)
	}
}

func _Client_DeleteClient0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteClientReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/client.service.v1.Client/DeleteClient")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteClient(ctx, req.(*DeleteClientReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteClientReply)
		return ctx.Result(200, reply)
	}
}

func _Client_SearchClient0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchClientReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/client.service.v1.Client/SearchClient")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchClient(ctx, req.(*SearchClientReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchClientReply)
		return ctx.Result(200, reply)
	}
}

type ClientHTTPClient interface {
	CreateClient(ctx context.Context, req *CreateClientReq, opts ...http.CallOption) (rsp *CreateClientReply, err error)
	DeleteClient(ctx context.Context, req *DeleteClientReq, opts ...http.CallOption) (rsp *DeleteClientReply, err error)
	GetClient(ctx context.Context, req *GetClientReq, opts ...http.CallOption) (rsp *GetClientReply, err error)
	ListClient(ctx context.Context, req *ListClientReq, opts ...http.CallOption) (rsp *ListClientReply, err error)
	SearchClient(ctx context.Context, req *SearchClientReq, opts ...http.CallOption) (rsp *SearchClientReply, err error)
	UpdateClient(ctx context.Context, req *UpdateClientReq, opts ...http.CallOption) (rsp *UpdateClientReply, err error)
}

type ClientHTTPClientImpl struct {
	cc *http.Client
}

func NewClientHTTPClient(client *http.Client) ClientHTTPClient {
	return &ClientHTTPClientImpl{client}
}

func (c *ClientHTTPClientImpl) CreateClient(ctx context.Context, in *CreateClientReq, opts ...http.CallOption) (*CreateClientReply, error) {
	var out CreateClientReply
	pattern := "/clients/v1"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/client.service.v1.Client/CreateClient"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) DeleteClient(ctx context.Context, in *DeleteClientReq, opts ...http.CallOption) (*DeleteClientReply, error) {
	var out DeleteClientReply
	pattern := "/clients/v1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/client.service.v1.Client/DeleteClient"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) GetClient(ctx context.Context, in *GetClientReq, opts ...http.CallOption) (*GetClientReply, error) {
	var out GetClientReply
	pattern := "/clients/v1/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/client.service.v1.Client/GetClient"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) ListClient(ctx context.Context, in *ListClientReq, opts ...http.CallOption) (*ListClientReply, error) {
	var out ListClientReply
	pattern := "/clients/v1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/client.service.v1.Client/ListClient"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) SearchClient(ctx context.Context, in *SearchClientReq, opts ...http.CallOption) (*SearchClientReply, error) {
	var out SearchClientReply
	pattern := "/clients/v1/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/client.service.v1.Client/SearchClient"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...http.CallOption) (*UpdateClientReply, error) {
	var out UpdateClientReply
	pattern := "/clients/v1/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/client.service.v1.Client/UpdateClient"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
